#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/2e5bde1f-8d4d-4321
  984f-9d6dd8e8801d
  Arduino IoT Cloud Variables description
  The following variables are automatically generated and
  updated when changes are made to the Thing
  float suhu;
  CloudRelativeHumidity kelembaban;
  bool pompa1;
  bool pompa2;
  Variables which are marked as READ/WRITE in the Cloud
  Thing will also have functions
  which are called when their values are changed from the
  Dashboard.
  These functions are generated with the Thing and added at
  the end of this sketch.
*/
#include "thingProperties.h"
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#define SensorPin A0
#define ONE_WIRE_BUS D5
LiquidCrystal_I2C lcd(0x27, 20, 4);  // Alamat I2C dan
ukuran layar (16 kolom, 2 baris)
unsigned long previousMillis = 0;
const long interval = 5000;
int previousDay = 0;
int intervalPupuk = 3;
int count = 0;
int maxCount = 2;
const int AirValue = 680;
const int WaterValue = 380;
int soilmoisturepercent = 0;
bool pompa1Status = false;
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");
String weekDays[7] = { "Sunday", "Monday", "Tuesday",
                       "Wednesday", "Thursday", "Friday", "Saturday"
                     };
String months[12] = {  "January", "February", "March",
                       "April", "May", "June", "July", "August", "September",
                       "October", "November", "December"
                    };
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial
  Monitor without blocking if none is found
  delay(1500);
  pinMode(D0, OUTPUT);
  pinMode(D5, INPUT_PULLUP);
  pinMode(D6, OUTPUT);
  pinMode(D7, OUTPUT);
  digitalWrite(D6, HIGH);
  digitalWrite(D7, HIGH);



  pinMode(D3, OUTPUT);
  pinMode(D4, OUTPUT);
  pinMode(D8, OUTPUT);
  lcd.init();
  lcd.backlight();

  timeClient.begin();
  // Set offset time in seconds to adjust for your timezone,
for example :
  // GMT +1 = 3600
  // GMT +8 = 28800
  // GMT -1 = -3600
  // GMT 0 = 0
  timeClient.setTimeOffset(25200);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more
    information
     related to the state of network and IoT Cloud
    connection and errors
     the higher number the more granular information youâ€™ll
    get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here



  timeClient.update();

  time_t epochTime = timeClient.getEpochTime();

  struct tm* ptm = gmtime((time_t*)&epochTime);

  int monthDay = ptm->tm_mday;
  int currentDay = ptm->tm_yday;
  int currentMonth = ptm->tm_mon + 1;
  int currentYear = ptm->tm_year + 1900;
  String currentMonthName = months[currentMonth - 1];
  String currentDate = String(currentYear) + " " +
                       String(currentMonthName) + " " + String(monthDay);
  Serial.print("Current date: ");
  Serial.println(currentDate);

  String formattedTime = timeClient.getFormattedTime();
  Serial.print("Formatted Time: ");
  Serial.println(formattedTime);


  Serial.println("");
  delay(2000);
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
  }
  sensors.requestTemperatures();
  float datasuhu = sensors.getTempCByIndex(0);
  if (datasuhu > 0 && datasuhu < 100) {
    suhu = (1.6027 * datasuhu) - 19.571;
  }
  float sensorValue = analogRead(SensorPin);
  kelembaban = map(sensorValue, AirValue, WaterValue, 0,
                   100);
  kelembabanfix = (0.7508 * kelembaban) + 86.87




  if (currentDay - previousDay >= intervalPupuk) {
    previousDay = currentDay;
    //penyiraman pupuk
    digitalWrite(D7, LOW);
    delay(50);
    digitalWrite(D7, HIGH);
    delay(4000);
    digitalWrite(D7, LOW);
    delay(50);
    digitalWrite(D7, HIGH);
  } else {
    digitalWrite(D7, HIGH);
  }

  lcd.setCursor(0, 0); // Pindah ke kolom 0 di baris 0
  lcd.print("Suhu: " + String(suhu) + "C"); // Tampilkan nilai suhu

  lcd.setCursor(0, 1); // Pindah ke kolom 0 di baris 1
  lcd.print("Kelembaban: " + String(kelembaban) + " %"); //Tampilkan nilai kelembaban



  if (kelembaban < 60) {
    digitalWrite(D3, HIGH);   // Menghidupkan LED merah
    digitalWrite(D4, LOW);   // Mematikan LED hijau
    digitalWrite(D8, LOW);    // Mematikan LED biru
  } else if (kelembaban >= 60 && kelembaban <= 75) {
    digitalWrite(D3, LOW);    // Mematikan LED merah
    digitalWrite(D4, HIGH);   // Menghidupkan LED hijau
    digitalWrite(D8, LOW);     // Mematikan LED biru
  } else {
    digitalWrite(D3, LOW);    // Mematikan LED merah
    digitalWrite(D4, LOW);    // Mematikan LED hijau
    digitalWrite(D8, HIGH);    // Menghidupkan LED biru
  }
  if (kelembaban < 60 && !pompa1Status) {



    pompa1Status = true;
    digitalWrite(D6, LOW);
    delay(50);
    digitalWrite(D6, HIGH);
    delay(7000);
    digitalWrite(D6, LOW);
    delay(50);
    digitalWrite(D6, HIGH);
  }
  else if (kelembaban >= 60 && pompa1Status) {
    pompa1Status = false;
    digitalWrite(D6, HIGH);
  }
}




/*
  Since Suhu is READ_WRITE variable, onSuhuChange() is
  executed every time a new value is received from IoT
  Cloud.
*/
void onSuhuChange()  {
  // Add your code here to act upon Suhu change

}


/*
  Since Kelembaban is READ_WRITE variable,
  onKelembabanChange() is
  executed every time a new value is received from IoT
  Cloud.
*/
void onKelembabanChange()  {
  // Add your code here to act upon Kelembaban change
  if (kelembaban < 60 && !pompa1Status) {



    pompa1Status = true;
    digitalWrite(D6, LOW);
    delay(50);
    digitalWrite(D6, HIGH);
    delay(4000);
    digitalWrite(D6, LOW);
    delay(50);
    digitalWrite(D6, HIGH);
  }
  else if (kelembaban >= 60 && pompa1Status) {
    pompa1Status = false;
    digitalWrite(D6, HIGH);
  }
}
/*
  Since Pompa1 is READ_WRITE variable, onPompa1Change() is
  executed every time a new value is received from IoT
  Cloud.
*/
void onPompa1Change()  {
  // Add your code here to act upon Pompa1 change
  if (pompa1) {
    digitalWrite(D6, LOW);
    delay(50);
    digitalWrite(D6, HIGH);
    digitalWrite(D0, HIGH);
    delay(3000);
    digitalWrite(D6, LOW);
    delay(50);
    digitalWrite(D6, HIGH);
  } else {
    digitalWrite(D6, HIGH);
    digitalWrite(D0, LOW);
  }
}
/*
  Since Pompa2 is READ_WRITE variable, onPompa2Change() is



  executed every time a new value is received from IoT
  Cloud.
*/
void onPompa2Change()  {
  // Add your code here to act upon Pompa2 change
  if (pompa2) {
    digitalWrite(D7, LOW);
    delay(50);
    digitalWrite(D7, HIGH);
    delay(3000);
    digitalWrite(D7, LOW);
    delay(50);
    digitalWrite(D7, HIGH);
  } else {
    digitalWrite(D7, HIGH);
  }
}